(()=>{var __webpack_modules__={716:module=>{module.exports=eval("require")("@actions/github")},365:module=>{module.exports=eval("require")("args-parser")},225:e=>{"use strict";e.exports=require("fs/promises")}};var __webpack_module_cache__={};function __nccwpck_require__(e){var _=__webpack_module_cache__[e];if(_!==undefined){return _.exports}var r=__webpack_module_cache__[e]={exports:{}};var t=true;try{__webpack_modules__[e](r,r.exports,__nccwpck_require__);t=false}finally{if(t)delete __webpack_module_cache__[e]}return r.exports}if(typeof __nccwpck_require__!=="undefined")__nccwpck_require__.ab=__dirname+"/";var __webpack_exports__={};(()=>{const e=__nccwpck_require__(225);const _=__nccwpck_require__(716);const{token:r,repo:t}=__nccwpck_require__(365)(process.argv);const groupBy=(e,_)=>e.reduce(((e,r)=>{const t=_(r);if(!e[t]){e[t]=[]}e[t].push(r);return e}),{});async function run(){try{const o=_.getOctokit(r);const[a,s]=t.split("/");let{data:c}=await o.rest.issues.listForRepo({owner:a,repo:s,state:"closed"});c=groupBy(c,(e=>e.milestone?e.milestone.title:e.updated_at.slice(0,7)));let u="";Object.keys(c).sort(((e,_)=>e>_?-1:1)).forEach((e=>{u+=`## ✍ ${e}\n`;c[e].sort(((e,_)=>e.update_at>_.update_at?-1:1)).forEach((({title:e,html_url:_})=>{u+=`- [${e}](${_})\n`}))}));e.writeFile("README.md",u,{encoding:"utf8"})}catch(e){console.error(e.message)}}run()})();module.exports=__webpack_exports__})();